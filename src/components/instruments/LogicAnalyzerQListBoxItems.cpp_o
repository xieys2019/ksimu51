/***************************************************************************
 *   Copyright (C) 2008 by Heikki Pulkkinen   *
 *   heikki@localhost   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#include "LogicAnalyzerQListBoxItems.h"

WaveViewPainter::WaveViewPainter(int const itemHeight, int *pToListBoxWidth, list<double> *pToTimeList, list<unsigned long> *pToMachineCyclesValueList, list<unsigned long> *pToProgramCounterValueList, DataLogger *pToDataList, unsigned long long *pToTimeAxelMultiplier, int *pToTimeAxelSliderValue, bool *pToRasterOnValue, unsigned long *pToPointed_x, int *pToHScrollBValue, int *pToStartMachineCycle)
{
	thisHeight_=itemHeight;
	pToListBoxWidth_=pToListBoxWidth;
	pToTimeList_=pToTimeList;
	pToMachineCyclesValueList_=pToMachineCyclesValueList;
	pToProgramCounterValueList_=pToProgramCounterValueList;
	pToDataList_=pToDataList;
	pToTimeAxelMultiplier_=pToTimeAxelMultiplier;
	pToTimeAxelSliderValue_=pToTimeAxelSliderValue;
	pToRasterOn_=pToRasterOnValue;
	pToPointed_x_=pToPointed_x;
	pToHScrollBValue_=pToHScrollBValue;
	pToStartMachineCycle_=pToStartMachineCycle;

	thisWidth_=0;

	pointedXSet_=false;
	pointedXSet_PointValue_=0;
	timePointedPoint_=0.0;
	selected_=false;
	paintPointedPointLoopValue_=0;
}

WaveViewPainter::~WaveViewPainter()
{
}

void WaveViewPainter::startDraw(void)
{
	draw_=true;
	start_x_=last_x_;
	paintStart_x_=0;
	pointedMachineCycleValueLastPaint_x_=paintStart_x_;
	pointedMachineCycleValueVector_.push_back(mCycle_);
}

void WaveViewPainter::clearValues(void)
{
	pointedPixel_x_=0;
	pointedXSet_=false;
	pointedXSet_PointValue_=0;
	timePointedPoint_=0.0;
	paintPointedPointLoopValue_=0;
	lastPaintedTimeChange_x_=0;
}

void WaveViewPainter::paintW(QPainter *p, bool const selected)
{
	if(!pToTimeList_->empty())
	{
		selected_=selected;
		painter_=p;
		pen_=painter_->pen();
		last_x_=0;
		new_x_=0;
		start_x_=0;
		paintStart_x_=0;
		thisWidth_=0;
		list<double>::iterator time_it=pToTimeList_->begin();
		list<unsigned long>::iterator machineC_it=pToMachineCyclesValueList_->begin();
		list<unsigned long>::iterator programC_it=pToProgramCounterValueList_->begin();
		list<bool>::iterator value_it=pToDataList_->begin();
		pointedMachineCycleValueVector_.clear();
		machineCycleXVector_.clear();
		uint numTimes=pToTimeList_->size();
		timeAdd_=0.0;
		timeCal_=*time_it;
		unsigned long lastMCycle=numeric_limits<unsigned long >::max();
		unsigned long cycleCount=0;
		bool doNotDrawAnymore=false;
		pointedMachineCycleValueLastPaint_x_=0;
		draw_=false;
		pointedPixel_x_=timePointedPoint_**pToTimeAxelMultiplier_;
		long long startDPoint=pointedPixel_x_-MAX_POINTEDPOINT_PAINT_X_;
		if(*pToPointed_x_!=pointedXSet_PointValue_)
			pointedXSet_=false;
		if(!*pToPointed_x_)
			clearValues();
		paintStartValues();
		paintBeforeMainPaint();
		unsigned long n;
		for(n=0; n<numTimes; n++)
		{
			dataListValue_=*value_it++;
			mCycle_=*machineC_it++;
			pCounter_=*programC_it++;
			//MachineCyclen muutos
			if((lastMCycle!=mCycle_)&&n)
			{
				cycleCount++;
				machineCycleXVector_.push_back(last_x_);
				if(!doNotDrawAnymore)
				{
					if(!draw_)
						if(!*pToPointed_x_)
							//if(cycleCount>*pToStartMachineCycle_)
								startDraw();
					if(draw_)
						paintWhenCycle();
				}
				lastMCycle=mCycle_;
			}
			else
				if(!doNotDrawAnymore)
					if(draw_)
					{
						paintWhenNotCycle();
						lastPaintedTimeChange_x_=paintStart_x_;
					}
			timeAdd_+=*time_it-timeCal_;
			new_x_=timeAdd_**pToTimeAxelMultiplier_;
			paintEnd_x_=new_x_-start_x_;
			if(!doNotDrawAnymore)
			{
				end_x_=new_x_;
				if(!draw_)
				{
					if(*pToPointed_x_)
					{
						if(((paintEnd_x_>=startDPoint)&&(startDPoint>=0))||(pointedPixel_x_<MAX_POINTEDPOINT_PAINT_X_))
						{
							startDraw();
							if(pointedPixel_x_>=MAX_POINTEDPOINT_PAINT_X_)
								start_x_=startDPoint;
							paintEnd_x_=new_x_-start_x_;
						}
						else
							paintEnd_x_=0;
					}
				}
				if(draw_)
				{
					if(paintEnd_x_>MAX_PIXELSTOPAINT_)
					{
						end_x_-=paintEnd_x_-MAX_PIXELSTOPAINT_;
						paintEnd_x_=MAX_PIXELSTOPAINT_;
						doNotDrawAnymore=true;
					}
					paintAfterNewXCalc();
					while(pointedMachineCycleValueLastPaint_x_<paintStart_x_)
					{
						pointedMachineCycleValueVector_.push_back(mCycle_);
						pointedMachineCycleValueLastPaint_x_++;
					}
					if(*pToPointed_x_)
					{
						if(!pointedXSet_)
						{
							if((paintStart_x_>=*pToPointed_x_)||((paintEnd_x_>*pToPointed_x_)&&(paintPointedPointLoopValue_>n)))
							{
								pointedXSet_=true;
								pointedXSet_PointValue_=*pToPointed_x_;
								timePointedPoint_=timeAdd_;
								if(paintPointedPointLoopValue_>n)
									timePointedPoint_-=*time_it-timeCal_;
								paintPointedPointLoopValue_=n;
							}
						}
						if(pointedXSet_)
							if(paintPointedPointLoopValue_==n)
								paintPointedPoint();
					}
				}
			}
			last_x_=new_x_;
			paintStart_x_=paintEnd_x_;
			timeCal_=*time_it++;
			//if(doNotDrawAnymore)
			//	break;
		}
		if(draw_)
			paintBeforeExit(doNotDrawAnymore);
		if(!cycleCount)
			clearValues();
	}
}

unsigned long WaveViewPainter::pointedMachineCycleValue(int const pointed_x_value)
{
	if(pointed_x_value<pointedMachineCycleValueVector_.size())
		return pointedMachineCycleValueVector_[pointed_x_value];
	return 0;
}

unsigned long WaveViewPainter::pointedPointPainted_x_Value(void)
{
	if(pointedXSet_)
		return pointedPixel_x_-start_x_;
	return 0;
}

unsigned long WaveViewPainter::machineCycle_x_Value(unsigned long &cycleNumber)
{
	unsigned long cn=cycleNumber;
	cycleNumber=machineCycleXVector_.size();//Palauttaa vektorin koon cycleNumberina
	if(cn<cycleNumber)
		return machineCycleXVector_[cn];
	return 0;
}

unsigned long WaveViewPainter::paintStart_x_Value(void) const
{
	return start_x_;
}

unsigned long WaveViewPainter::paintEnd_x_Value(void) const
{
	return end_x_;
}

unsigned long WaveViewPainter::lastPaintedTimeChange_x_Value(void)
{
	return lastPaintedTimeChange_x_;
}

void WaveViewPainter::paintStartValues(void)
{
	last_y_=thisHeight_-4;
	new_y_=thisHeight_-4;
	
	paintCycleLines_=false;
	if(*pToTimeAxelMultiplier_>=1.0e8)
		paintCycleLines_=true;

	wavePaintColor_=QColor(Qt::blue);
	if(selected_)
		wavePaintColor_=QColor(Qt::white);
}

void WaveViewPainter::paintBeforeMainPaint(void)
{
	pen_.setColor(QColor(Qt::black));
	pen_.setWidth(1);
	painter_->setPen(pen_);
	painter_->drawLine(0, thisHeight_-1, MAX_PIXELSTOPAINT_, thisHeight_-1);
	thisWidth_=MAX_PIXELSTOPAINT_+50;
}

void WaveViewPainter::paintPointedPoint(void)
{
	pen_.setColor(QColor(Qt::red));
	if(*pToRasterOn_)
		pen_.setWidth(3);
	else
		pen_.setWidth(2);
	painter_->setPen(pen_);
	painter_->drawLine(paintStart_x_, 0, paintStart_x_, thisHeight_);
}

void WaveViewPainter::paintWhenCycle(void)
{
	if(paintCycleLines_)
	{
		pen_.setColor(QColor(Qt::black));
		if(*pToRasterOn_)
			pen_.setWidth(2);
		else
			pen_.setWidth(1);
		painter_->setPen(pen_);
		painter_->drawLine(paintStart_x_, 0, paintStart_x_, thisHeight_);
	}
}

void WaveViewPainter::paintWhenNotCycle(void)
{
	if(*pToRasterOn_&&paintCycleLines_)
	{
		pen_.setColor(QColor(Qt::gray)); //Muuten sitten harmaata kappeeta
		pen_.setWidth(1);
		painter_->setPen(pen_);
		painter_->drawLine(paintStart_x_, 0, paintStart_x_, thisHeight_);
	}
}

void WaveViewPainter::paintAfterNewXCalc(void)
{
	new_y_=thisHeight_-4;
	if(dataListValue_)
		new_y_=4;
	pen_.setColor(wavePaintColor_);
	pen_.setWidth(2);
	painter_->setPen(pen_);
	painter_->drawLine(paintStart_x_, last_y_, paintStart_x_, new_y_);
	painter_->drawLine(paintStart_x_, new_y_, paintEnd_x_, new_y_);
	last_y_=new_y_;
}

void WaveViewPainter::paintBeforeExit(const bool notPaintedAll)
{
	if(!notPaintedAll)
	{
		pen_.setColor(QColor(Qt::black));
		pen_.setWidth(2);
		painter_->setPen(pen_);
		painter_->drawLine(paintStart_x_, 0, paintStart_x_, thisHeight_);
	}
}

int WaveViewPainter::height(void) const
{
	return thisHeight_;
}

int WaveViewPainter::width(void) const
{
	return thisWidth_;
}

WaveViewQListBoxItem::WaveViewQListBoxItem(int const itemHeight, int *pToListBoxWidth, list<double>* pToTimeList, list<unsigned long> *pToMachineCyclesValueList, list<unsigned long> *pToProgramCounterValueList, DataLogger* pToDataList, unsigned long long* pToTimeAxelMultiplier, int *pToTimeAxelSliderValue, bool* pToRasterOnValue, unsigned long *pToPointed_x, int *pToHScrollBValue, int *pToStartMachineCycle) : QListBoxItem()
{
	wPainter_=new WaveViewPainter(itemHeight, pToListBoxWidth, pToTimeList, pToMachineCyclesValueList, pToProgramCounterValueList, pToDataList, pToTimeAxelMultiplier, pToTimeAxelSliderValue, pToRasterOnValue, pToPointed_x, pToHScrollBValue, pToStartMachineCycle);
}

WaveViewQListBoxItem::~WaveViewQListBoxItem()
{
	delete wPainter_;
}

void WaveViewQListBoxItem::paint(QPainter *p)
{
	wPainter_->paintW(p, isSelected());
}

int WaveViewQListBoxItem::height(const QListBox * lb) const
{
	return wPainter_->height();
}

int WaveViewQListBoxItem::width(const QListBox * lb) const
{
	return wPainter_->width();
}

long WaveViewQListBoxItem::pointedMachineCycle(int const pointed_x_value)
{
	return wPainter_->pointedMachineCycleValue(pointed_x_value);
}

unsigned long WaveViewQListBoxItem::pointedPointPainted_x(void)
{
	return wPainter_->pointedPointPainted_x_Value();
}

unsigned long WaveViewQListBoxItem::machineCycle_x(unsigned long &cycleNumber)
{
	return wPainter_->machineCycle_x_Value(cycleNumber);
}

unsigned long WaveViewQListBoxItem::paintStart_x(void)
{
	return wPainter_->paintStart_x_Value();
}

unsigned long WaveViewQListBoxItem::paintEnd_x(void)
{
	return wPainter_->paintEnd_x_Value();
}

unsigned long WaveViewQListBoxItem::lastPaintedTimeChange_x(void)
{
	return wPainter_->lastPaintedTimeChange_x_Value();
}
//Text listboxi-----------------------------------------
TextViewPainter::TextViewPainter(int const itemHeight, int *pToListBoxWidth, list<double> *pToTimeList, list<unsigned long> *pToMachineCyclesValueList, list<unsigned long> *pToProgramCounterValueList, DataLogger *pToDataList, unsigned long long *pToTimeAxelMultiplier, int *pToTimeAxelSliderValue, bool *pToRasterOnValue, unsigned long *pToPointed_x, int *pToHScrollBValue, int *pToStartMachineCycle) : WaveViewPainter(itemHeight, pToListBoxWidth, pToTimeList, pToMachineCyclesValueList, pToProgramCounterValueList, pToDataList, pToTimeAxelMultiplier, pToTimeAxelSliderValue, pToRasterOnValue, pToPointed_x, pToHScrollBValue, pToStartMachineCycle)
{
}

TextViewPainter::~TextViewPainter()
{
}
void TextViewPainter::paintStartValues(void)
{
	paintCycleText_=false;
	if(*pToTimeAxelMultiplier_>=1.0e7)
		paintCycleText_=true;

	adderToTimeLines_=1.0;
	timeLinesTxt_="1s";
	unsigned long long tam=*pToTimeAxelMultiplier_;
	int n=0;
	double div=1000.0;
	while(tam>0)
	{
		n++;
		tam/=10;
		div/=10.0;
	}
	if(n>1)
	{
		if(!(n%3))
			timeLinesTxt_="1";
		else
			if(!((n+1)%3))
				timeLinesTxt_="10";
			else
				timeLinesTxt_="100";
		if(n<4)
			timeLinesTxt_+="s";
		else
			if(n<7)
				timeLinesTxt_+="ms";
			else
				if(n<10)
					timeLinesTxt_+="us";
				else
					if(n<13)
						timeLinesTxt_+="ns";
					else
						if(n<16)
							timeLinesTxt_+="ps";
						else
							timeLinesTxt_+="fs";
	}
	adderToTimeLines_=div**pToTimeAxelMultiplier_;
	tenthPartsAdder_=adderToTimeLines_/10.0;
	hundredsPartsAdder_=tenthPartsAdder_/10.0;
	xToTimeLinesCount_=.0;
	linesCount_=0;
	yhp2_=thisHeight_/2;

	paintColor_=QColor(Qt::gray);
	if(selected_)
		paintColor_=QColor(Qt::white);
}

void TextViewPainter::paintBeforeMainPaint(void)
{
	pen_.setColor(paintColor_);
	pen_.setWidth(1);
	painter_->setPen(pen_);
	bool paintHundredsParts=false;
	if(hundredsPartsAdder_>=2.0)
		paintHundredsParts=true;
	bool timeDrawn=false;
	int tlen=timeLinesTxt_.length();
	int halfStrPix=tlen*8/2;
	int yhp4=yhp2_>>1;
	int sp2=adderToTimeLines_/2;
	int prev_x=int(xToTimeLinesCount_);
	while(int(xToTimeLinesCount_)<MAX_PIXELSTOPAINT_)
	{
		painter_->drawLine(int(xToTimeLinesCount_), 0, int(xToTimeLinesCount_), thisHeight_);
		for(int z=1; z<11;z++)
		{
			int zx=int(xToTimeLinesCount_)+tenthPartsAdder_*z;
			if((z<10)&&(zx<MAX_PIXELSTOPAINT_))
				painter_->drawLine(zx, 0, zx, yhp2_);
			if(paintHundredsParts)
				for(int hp=1; hp<10; hp++)
				{
					int hpx=zx-hp*hundredsPartsAdder_;
					if(hpx<MAX_PIXELSTOPAINT_)
						painter_->drawLine(hpx, 0, hpx, yhp4);
				}
		}
		xToTimeLinesCount_+=adderToTimeLines_;
		if(!timeDrawn&&(*pToHScrollBValue_<prev_x))
		{
			int xp2=prev_x+sp2;
			int y3p4=thisHeight_-yhp4;
			painter_->drawLine(prev_x+1, y3p4, xp2-halfStrPix-5, y3p4);
			painter_->drawLine(xp2+halfStrPix+5, y3p4, xToTimeLinesCount_-1, y3p4);
			painter_->drawText(xp2-halfStrPix, thisHeight_, timeLinesTxt_, -1, QPainter::LTR);
			timeDrawn=true;
		}
		prev_x=int(xToTimeLinesCount_);
	}
}

void TextViewPainter::paintWhenCycle(void)
{
	if(paintCycleText_)
	{
		if(*pToRasterOn_)
			pen_.setWidth(2);
		else
			pen_.setWidth(1);
		pen_.setColor(paintColor_);
		painter_->setPen(pen_);
		painter_->drawLine(paintStart_x_, 0, paintStart_x_, yhp2_);
		pCounterTxt_.setNum(pCounter_, 16);
		painter_->drawText(paintStart_x_, thisHeight_, pCounterTxt_.upper(), -1, QPainter::LTR);
	}
}

void TextViewPainter::paintWhenNotCycle(void)
{
	//Nothing to do!
}

void TextViewPainter::paintAfterNewXCalc(void)
{
/*	if(*pToRasterOn_&&paintCycleText_)
	{
		pen_.setColor(paintColor_);
		pen_.setWidth(1);
		painter_->setPen(pen_);
	}
 */
}

void TextViewPainter::paintBeforeExit(const bool notPaintedAll)
{
	if(!notPaintedAll)
	{
		pen_.setColor(paintColor_);
		pen_.setWidth(1);
		painter_->setPen(pen_);
		painter_->drawLine(paintStart_x_, 0, paintStart_x_, yhp2_);
		pCounterTxt_.setNum(timeCal_);
		painter_->drawText(paintStart_x_-36, thisHeight_, pCounterTxt_, -1, QPainter::LTR);
	}
}

TextViewQListBoxItem::TextViewQListBoxItem(int const itemHeight, int *pToListBoxWidth, list<double>* pToTimeList, list<unsigned long> *pToMachineCyclesValueList, list<unsigned long> *pToProgramCounterValueList, DataLogger *pToDataList, unsigned long long *pToTimeAxelMultiplier, int *pToTimeAxelSliderValue, bool *pToRasterOnValue, unsigned long *pToPointed_x, int *pToHScrollBValue, int *pToStartMachineCycle) : QListBoxItem()
{
	tPainter_=new TextViewPainter(itemHeight, pToListBoxWidth, pToTimeList, pToMachineCyclesValueList, pToProgramCounterValueList, pToDataList, pToTimeAxelMultiplier, pToTimeAxelSliderValue, pToRasterOnValue, pToPointed_x, pToHScrollBValue, pToStartMachineCycle);
	
	painted_=false;
}

TextViewQListBoxItem::~TextViewQListBoxItem()
{
	delete tPainter_;
}

void TextViewQListBoxItem::paint(QPainter *p)
{
	tPainter_->paintW(p, isSelected());
	painted_=true;
}

bool TextViewQListBoxItem::painted(bool const reset)
{
	if(reset)
		painted_=false;
	return painted_;
}

int TextViewQListBoxItem::height(const QListBox * lb) const
{
	return tPainter_->height();
}

int TextViewQListBoxItem::width(const QListBox * lb) const
{
	return tPainter_->width();
}

long TextViewQListBoxItem::pointedMachineCycle(int const pointed_x_value)
{
	return tPainter_->pointedMachineCycleValue(pointed_x_value);
}

